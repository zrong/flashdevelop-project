<?xml version="1.0" encoding="UTF-8"?>
<!-- 完成swf文件打包流程 -->
<!-- Author : zrong -->
<!-- Blog: zengrong.net -->
<!-- E-mail : zrongzrong@gmail.com -->
<!-- Creation : 2012-10-29 -->
<!-- Modification : 2012-11-05 -->
<!-- Modification : 2013-05-31 支持读取Flash Develop配置，支持独立打包 -->
<!-- Modification : 2013-06-27 加入iOS调试功能；加入自动替换xml文件的extensions标签功能 -->
<project name="mobilePackager" default="packswf">
	<property file="build.properties" />
	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	<if>
		<or>
			<istrue value="${standalone}"/>
			<not>
				<available property="fd.exists" file="${FD_PROJECT}"/>
			</not>
		</or>
		<!-- 若单独使用，或者找不到FD配置，那么根据变量自动生成 -->
		<then>
			<property name="swf.name" value="${MAIN_NAME}.swf"/>
			<property name="swf.file" value="${BIN_DIR}/${swf.name}"/>
			<property name="main.name" value="${MAIN_NAME}.mxml"/>
			<property name="main.file" value="${SRC_DIR}/${MAIN_PATH}${main.name}"/>
		</then>
		<!-- 否则读取FD配置的内容 -->
		<else>
			<echo>Found the Flash Develop project: ${FD_PROJECT}.</echo>
			<!-- 读取FD配置，获取FD导出的swf文件，替换原来的变量值 -->
			<xmlproperty file="${FD_PROJECT}" keeproot="false"/>
			<!-- 获取Flash Develop项目文件中配置的swf文件 -->
			<property name="swf.file" value="${basedir}/${output.movie(path)}" />
			<!-- 不包含目录部分的文件名 -->
			<propertyregex property="swf.name" input="${swf.file}" regexp=".*\\([\w]*.swf)" select="\1"/>
			<!-- 获取Flash Develop项目文件中配置的主类文件 -->
			<property name="main.file" value="${basedir}/${compileTargets.compile(path)}" />
			<!-- 不包含目录部分的文件名 -->
			<propertyregex property="main.name" input="${main.file}" regexp=".*\\([\w]*.mxml)" select="\1"/>
		</else>
	</if>
	<echo>main.file:${main.file}</echo>
	<echo>main.name:${main.name}</echo>
	<echo>swf.file:${swf.file}</echo>
	<echo>swf.name:${swf.name}</echo>

	<!-- 清除项目 -->
	<target name="clearswf">
		<delete file="${swf.file}"/>
	</target>

	<!-- 开始打包swf -->
	<target name="packswf" depends="clearswf">
		<condition property="var.debug" value="${var.debug}" else="true">
			<isset property="var.debug" />
		</condition>
		<condition property="var.optimize" value="${var.optimize}" else="true">
			<isset property="var.optimize" />
		</condition>
		<condition property="var.swfversion" value="${var.swfversion}" else="17">
			<isset property="var.swfversion" />
		</condition>
		<echo>Building swf file ${swf.file}...</echo>
		<echo>The main file is ${main.file}.</echo>
		<echo>debug:${var.debug} optimize:${var.optimize} swfversion:${var.swfversion}</echo>
		<java jar="${FLEX_HOME}/lib/mxmlc.jar" fork="true" failonerror="true" dir="${FLEX_FRAMEWORKS}">
			<arg value="-o=${swf.file}"/>
			<!-- <arg line="-sp=${basedir}/${SRC_DIR}"/> -->
			<arg value="-load-config=airmobile-config.xml"/>
			<arg value="-l+=${LIB_DIR}"/>
			<arg value="-l+=${ANE_DIR}/com.sanguo.ios.ane"/>
			<arg value="-debug=${var.debug}"/>
			<arg value="-optimize=${var.optimize}"/>
			<arg value="${main.file}"/>
		</java>
	</target>

	<!-- 创建Android 打包需要的p12文件 -->
	<target name="createCertificate">
		<echo>Delete old certificate file.</echo>
		<delete file="${ANT_CERT_FILE}"/>
		<echo>Create a new certificate file ${AND_CERT_FILE}.</echo>
		<java jar="${FLEX_HOME}/lib/adt.jar" fork="true" failonerror="true">
			<arg value="-certificate" />
			<arg line="-validityPeriod 25" />
			<arg line="-cn ${AND_CERT_NAME}" />
			<arg value="1024-RSA" /> 
			<arg value="${AND_CERT_FILE}" /> 
			<arg value="${AND_CERT_PASS}" /> 
		</java>
	</target> 

	<!-- 验证app.xml文件中的内容是否合适 -->
	<target name="replaceAPPXML">
		<xmlproperty file="${APP_XML}" keeproot="false"/>
		<echo>Replace the appid from ${id} to ${APP_ID} in ${APP_XML}.</echo>

		<!-- 将application.xml中的appid替换成配置中的值 -->
		<replaceregexp file="${APP_XML}" encoding="UTF-8">
			<regexp pattern="(\x3Cid\x3E).*(\x3C/id\x3E)"/>
			<substitution expression="\1${APP_ID}\2"/>
		</replaceregexp>
		<echo>Replace the content from ${initialWindow.content} to ${swf.name} in ${APP_XML}.</echo>
		<!-- 将application.xml中的content替换成swf.name的值 -->
		<replaceregexp file="${APP_XML}" encoding="UTF-8">
			<regexp pattern="(\x3Ccontent\x3E).*(\x3C/content\x3E)"/>
			<substitution expression="\1${swf.name}\2"/>
		</replaceregexp>

		<!-- 寻找extensions标签 -->
		<regexp id="var.reg" pattern="(\x3Cextensions\x3E)(.*)(\x3C/extensions\x3E)"/>
		<if>
			<!-- 若提供了ANE_IDS，则xml文件中必须包含extensions标签 -->
			<length string="${ANE_IDS}" when="greater" trim="true" length="0"/>
			<then>
				<loadfile srcFile="${APP_XML}" property="app.xml" encoding="UTF-8"/>
				<if>
					<not>
						<matches string="${app.xml}" singleline="true">
							<regexp refid="var.reg"/>
						</matches>
					</not>
					<then>
						<fail message="Can not find the extensions label in ${APP_XML}!"/>
					</then>
				</if>
			</then>
		</if>
		<!-- 清空原来的extensions -->
		<replaceregexp file="${APP_XML}" encoding="UTF-8" flags="s" byline="false">
			<regexp refid="var.reg"/>
			<substitution expression="\1\3"/>
		</replaceregexp>
		<if>
			<isset property="ANE_IDS"/>
			<then>
				<!-- 循环加入当前的extensions -->
				<for param="curaneid" list="${ANE_IDS}" delimiter=" ">
					<sequential>
						<replaceregexp file="${APP_XML}" encoding="UTF-8" flags="s" byline="false">
							<!-- 尖括号不好替换，所以就用这个办法 \1\2是左右尖括号 -->
							<regexp pattern="(\x3C)extensions(\x3E)(.*)(\x3C/extensions\x3E)"/>
							<substitution expression="\1extensions\2\3\1extensionID\2@{curaneid}\1/extensionID\2\4"/>
						</replaceregexp>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<!-- Copy the assets to temp directory. -->
	<target name="copyPackageAssets">
		<mkdir dir="${TEMP_DIR}"/>
		<echo>Copy assets to ${TEMP_DIR} ${BIN_DIR}</echo>
		<copy todir="${TEMP_DIR}">
			<fileset dir="${BIN_DIR}">
				<include name="assets/**"/>
				<include name="${swf.name}"/>
			</fileset>
		</copy>
	</target>

	<!-- Package a APK or IPA file. -->
	<target name="packager" depends="copyPackageAssets,replaceAPPXML">
		<fail unless="var.type"/>
		<fail unless="var.signing"/>
		<fail unless="var.output"/>
		<property name="var.adt" value="${FLEX_HOME}/lib/adt.jar"/>
		<echo>${var.adt} -package -target ${var.type}${var.target} ${var.options} ${var.signing} ${var.output} ${APP_XML} ${var.fileordir} ${ANE_DIR_ARGS}</echo>
		<mkdir dir="${DIST_DIR}"/>
		<java jar="${var.adt}" fork="true" failonerror="true">
			<arg value="-package"/>
			<arg line="-target ${var.type}${var.target}"/>
			<arg line="${var.options}"/>
			<arg line="${var.signing}"/>
			<arg line="${var.output}"/>
			<arg value="${APP_XML}"/>
			<arg line="${var.fileordir}"/>
			<arg line="${ANE_DIR_ARGS}"/>
		</java>
		<delete dir="${TEMP_DIR}"/>
	</target>

	<!-- Install a APK file into a Android device, and start it. -->
	<target name="androidInstall">
		<fail unless="var.args"/>
		<exec executable="${ANDROID_PLATFORMTOOLS}/adb">
			<arg value="devices"/>
		</exec>
		<echo>Install apk file ${var.args}</echo>
		<exec executable="${ANDROID_PLATFORMTOOLS}/adb">
			<arg value="-d"/>
			<arg value="install"/>
			<arg value="-r"/>
			<arg value="${var.args}"/>
		</exec>
		<exec executable="${ANDROID_PLATFORMTOOLS}/adb">
			<arg line="shell am start "/>
			<arg line="-n air.${APP_ID}/.AppEntry"/>
		</exec>
	</target>

	<!-- Install a iap file into a iOS device -->
	<target name="iosInstall">
		<java jar="${FLEX_HOME}/lib/adt.jar" fork="true" failonerror="true">
			<arg value="-installApp"/>
			<arg line="-platform ios"/>
			<arg line="-package ${var.args}"/>
		</java>
	</target>

	<!-- Start ADL for APP_XML -->
	<target name="startADL" depends="replaceAPPXML">
		<property name="ADL" value="${FLEX_HOME}/bin/adl"/>
		<condition property="var.adl" value="${ADL}.exe" else="${ADL}">
			<os family="windows"/>
		</condition>
		<echo>OS family is ${os.name}. The adl is ${var.adl}.</echo>
            <exec executable="${var.adl}">
			<arg line="-screensize ${SCREEN_SIZE}"/>
			<arg line="-XscreenDPI ${SCREEN_DPI}"/>
			<arg line="${APP_XML} ${BIN_DIR}"/>
		</exec>
	</target>

	<!-- Package a APK file, install it to a Android device, then start it. -->
	<target name="runAndroidDebug">
		<echo>runAndroidDebug</echo>
		<if>
			<contains string="${var.profile}" substring="ipa"/>
			<then>
				<fail message="Android can not to use the ipa profile!"/>
			</then>
		</if>
		<propertycopy name="var.type" from="${var.profile}.var.type"/>
		<propertycopy name="var.target" from="${var.profile}.var.target"/>
		<propertycopy name="var.output" from="${var.profile}.var.output"/>
		<propertycopy name="var.options" from="${var.profile}.var.options"/>
		<propertycopy name="var.signing" from="${var.profile}.var.signing"/>
		<propertycopy name="var.fileordir" from="${var.profile}.var.fileordir"/>
		<antcall target="packager">
			<param name="var.type" value="${var.type}"/>
			<param name="var.target" value="${var.target}"/>
			<param name="var.output" value="${var.output}"/>
			<param name="var.options" value="${var.options}"/>
			<param name="var.signing" value="${var.signing}"/>
			<param name="var.fileordir" value="${var.fileordir}"/>
		</antcall>
		<antcall target="androidInstall">
			<param name="var.args" value="${var.output}"/>
		</antcall>
	</target>

	<!-- Package a IPA file, install it to a iOS device, then start it. -->
	<target name="runIOSDebug">
		<echo>runIOSDebug</echo>
		<if>
			<contains string="${var.profile}" substring="apk"/>
			<then>
				<fail message="iOS can not to use the apk profile!"/>
			</then>
		</if>
		<propertycopy name="var.type" from="${var.profile}.var.type"/>
		<propertycopy name="var.target" from="${var.profile}.var.target"/>
		<propertycopy name="var.output" from="${var.profile}.var.output"/>
		<propertycopy name="var.options" from="${var.profile}.var.options"/>
		<propertycopy name="var.signing" from="${var.profile}.var.signing"/>
		<propertycopy name="var.fileordir" from="${var.profile}.var.fileordir"/>
		<antcall target="packager">
			<param name="var.type" value="${var.type}"/>
			<param name="var.target" value="${var.target}"/>
			<param name="var.output" value="${var.output}"/>
			<param name="var.options" value="${var.options}"/>
			<param name="var.signing" value="${var.signing}"/>
			<param name="var.fileordir" value="${var.fileordir}"/>
		</antcall>
		<antcall target="iosInstall">
			<param name="var.args" value="${var.output}"/>
		</antcall>
	</target>

	<!-- Build a debug swf file, and start ADL to debug it. -->
	<target name="runSimulatorDebug">
		<echo>runSimulatorDebug ${APP_XML} ${BIN_DIR}</echo>
		<antcall target="packswf">
			<param name="var.debug" value="true"/>
			<param name="var.optimize" value="false"/>
		</antcall>
		<antcall target="startADL"/>
	</target>
</project>
